export interface SimpleMatchingQuestion {
  pairs: Array<{ en: string; zh: string }>
}

export interface SimpleFillBlankQuestion {
  sentence: string
  correctAnswer: string
}

export interface SimpleMultipleChoiceQuestion {
  question: string
  options: string[]
  correctAnswer: number
}

export interface SimplePracticeQuestions {
  matching: SimpleMatchingQuestion[]
  fillBlank: SimpleFillBlankQuestion[]
  multipleChoice: SimpleMultipleChoiceQuestion[]
}

export interface HtmlGenerationOptions {
  wordlistName: string
  questions: SimplePracticeQuestions
  includeTimer?: boolean
  darkMode?: boolean
}

export interface GeneratedHtml {
  html: string
  filename: string
  size: number
}

export class PracticeHtmlGenerator {
  generateHtml(options: HtmlGenerationOptions): GeneratedHtml {
    const { wordlistName, questions, includeTimer = false, darkMode = false } = options
    
    const timestamp = new Date().toISOString().split('T')[0]
    const filename = `${wordlistName.toLowerCase().replace(/[^a-z0-9]/g, '-')}-practice-${timestamp}.html`
    
    const html = this.buildHtmlDocument(wordlistName, questions, includeTimer, darkMode)
    
    return {
      html,
      filename,
      size: new Blob([html]).size
    }
  }

  private buildHtmlDocument(
    wordlistName: string, 
    questions: SimplePracticeQuestions, 
    includeTimer: boolean,
    darkMode: boolean
  ): string {
    const css = this.generateCSS(darkMode)
    const js = this.generateJavaScript(questions, includeTimer)
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${wordlistName} - Practice Questions</title>
    <style>${css}</style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>${wordlistName}</h1>
            <p>Practice Questions</p>
            ${includeTimer ? '<div id="timer" class="timer">00:00</div>' : ''}
        </div>

        <div id="app">
            <div id="questions-container"></div>
            <div id="results-container" style="display: none;"></div>
        </div>

        <div class="footer">
            <p>Generated by VocabGo</p>
        </div>
    </div>

    <script>${js}</script>
</body>
</html>`
  }

  private generateCSS(darkMode: boolean): string {
    return `
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      background: #f9fafb;
      color: #000000;
      line-height: 1.6;
      padding: 20px;
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      background: #ffffff;
      border-radius: 16px;
      padding: 32px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .header {
      text-align: center;
      margin-bottom: 32px;
      padding-bottom: 24px;
      border-bottom: 2px solid #e5e7eb;
    }

    .header h1 {
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 8px;
    }

    .header p {
      color: #6b7280;
      font-size: 14px;
    }

    .timer {
      font-size: 18px;
      font-weight: 600;
      color: #000000;
      background: #f3f4f6;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      padding: 12px 24px;
      display: inline-block;
      margin-top: 16px;
    }

    .question {
      margin-bottom: 32px;
      padding: 24px;
      background: #f9fafb;
      border-radius: 12px;
      border: 2px solid #e5e7eb;
    }

    .question-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
    }

    .question-number {
      font-size: 14px;
      font-weight: 600;
      color: #000000;
    }

    .question-type {
      font-size: 12px;
      font-weight: 500;
      color: #6b7280;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .question-content {
      font-size: 15px;
      color: #000000;
      margin-bottom: 16px;
    }

    .question-content strong {
      font-weight: 700;
      color: #000000;
      background: #fef3c7;
      padding: 2px 6px;
      border-radius: 4px;
    }

    .options {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .option {
      padding: 12px 16px;
      background: #ffffff;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      cursor: pointer;
      transition: all 150ms ease-out;
    }

    .option:hover {
      border-color: #9ca3af;
      background: #f9fafb;
    }

    .option.selected {
      border-color: #000000;
      background: #f3f4f6;
    }

    .option.correct {
      border-color: #10b981;
      background: #ecfdf5;
    }

    .option.incorrect {
      border-color: #ef4444;
      background: #fef2f2;
    }

    .input-answer {
      width: 100%;
      padding: 12px 16px;
      font-size: 15px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      outline: none;
      transition: all 150ms ease-out;
    }

    .input-answer:focus {
      border-color: #000000;
    }

    .matching-pairs {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 16px;
    }

    .matching-column {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .matching-item {
      padding: 12px 16px;
      background: #ffffff;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      cursor: pointer;
      transition: all 150ms ease-out;
      position: relative;
    }

    .matching-item:hover:not(.matched) {
      border-color: #9ca3af;
      background: #f9fafb;
      transform: translateY(-1px);
    }

    .matching-item.selected {
      border-color: #000000;
      background: #f3f4f6;
      box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
    }

    .matching-item.matched {
      border-color: #10b981;
      background: #ecfdf5;
      cursor: default;
      opacity: 0.7;
    }

    .matching-item.incorrect {
      border-color: #ef4444;
      background: #fef2f2;
      animation: shake 0.3s ease-in-out;
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(-4px); }
      75% { transform: translateX(4px); }
    }

    .btn {
      padding: 12px 24px;
      font-size: 15px;
      font-weight: 600;
      color: #ffffff;
      background: #000000;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      transition: all 150ms ease-out;
    }

    .btn:hover {
      background: #1f2937;
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .results {
      text-align: center;
      padding: 32px;
    }

    .score {
      font-size: 48px;
      font-weight: 700;
      margin-bottom: 16px;
    }

    .footer {
      margin-top: 32px;
      padding-top: 24px;
      border-top: 2px solid #e5e7eb;
      text-align: center;
      color: #6b7280;
      font-size: 13px;
    }

    @media (max-width: 640px) {
      .container {
        padding: 20px;
      }

      .matching-pairs {
        grid-template-columns: 1fr;
      }
    }
    `
  }

  private generateJavaScript(questions: SimplePracticeQuestions, includeTimer: boolean): string {
    // Transform questions to match the original format
    const transformedQuestions = this.transformQuestionsToOriginalFormat(questions)
    
    return `
    const questions = ${JSON.stringify(transformedQuestions)};
    let currentQuestionIndex = 0;
    let answers = {};
    let score = 0;
    let startTime = Date.now();
    let timerInterval;
    let wordlistId = null;

    // Get wordlist ID from URL or localStorage
    function getWordlistId() {
      if (wordlistId) return wordlistId;
      
      // Try to get from localStorage (set by practice view)
      const stored = localStorage.getItem('current_practice_wordlist_id');
      if (stored) {
        wordlistId = stored;
        return wordlistId;
      }
      
      return null;
    }

    // Record mistake function (fire and forget)
    async function recordMistake(word, translation, questionType) {
      const wlId = getWordlistId();
      if (!wlId) {
        console.warn('No wordlist ID available for mistake recording');
        return;
      }

      // Check if recordPracticeMistake is available (from main app)
      if (typeof window.recordPracticeMistake === 'function') {
        try {
          await window.recordPracticeMistake(wlId, word, translation, questionType);
        } catch (error) {
          console.error('Error recording mistake:', error);
        }
      } else {
        // Fallback: direct API call
        const sessionToken = localStorage.getItem('student_session_token');
        if (!sessionToken) return;

        try {
          const SUPABASE_URL = localStorage.getItem('supabase_url') || '';
          const SUPABASE_ANON_KEY = localStorage.getItem('supabase_anon_key') || '';
          
          if (!SUPABASE_URL || !SUPABASE_ANON_KEY) return;

          fetch(\`\${SUPABASE_URL}/functions/v1/record-practice-mistake\`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': \`Bearer \${SUPABASE_ANON_KEY}\`,
            },
            body: JSON.stringify({
              sessionToken,
              wordlistId: wlId,
              word,
              translation,
              questionType,
            }),
          }).catch(err => console.warn('Failed to record mistake:', err));
        } catch (error) {
          console.warn('Error in fallback mistake recording:', error);
        }
      }
    }

    function startTimer() {
      if (!${includeTimer}) return;
      
      timerInterval = setInterval(() => {
        const elapsed = Math.floor((Date.now() - startTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;
        const timerEl = document.getElementById('timer');
        if (timerEl) {
          timerEl.textContent = 
            minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
        }
      }, 1000);
    }

    function renderQuestions() {
      const container = document.getElementById('questions-container');
      container.innerHTML = '';

      questions.forEach((question, index) => {
        const questionDiv = document.createElement('div');
        questionDiv.className = 'question';
        questionDiv.innerHTML = \`
          <div class="question-header">
            <span class="question-number">Question \${index + 1} of \${questions.length}</span>
            <span class="question-type">\${formatQuestionType(question.type)}</span>
          </div>
          <div class="question-content" id="question-\${index}"></div>
        \`;
        container.appendChild(questionDiv);

        renderQuestion(question, index);
      });

      const submitBtn = document.createElement('button');
      submitBtn.className = 'btn';
      submitBtn.textContent = 'Submit Answers';
      submitBtn.onclick = submitAnswers;
      container.appendChild(submitBtn);
    }

    function renderQuestion(question, index) {
      const contentDiv = document.getElementById(\`question-\${index}\`);

      if (question.type === 'multiple-choice') {
        // Render sentence with HTML (to support <strong> tags for bold words)
        contentDiv.innerHTML = \`
          <p style="margin-bottom: 16px;">\${question.sentence}</p>
          <div class="options" id="options-\${index}"></div>
        \`;

        const optionsDiv = document.getElementById(\`options-\${index}\`);
        question.options.forEach((option, optionIndex) => {
          const optionDiv = document.createElement('div');
          optionDiv.className = 'option';
          optionDiv.textContent = option.text;
          optionDiv.onclick = () => selectOption(index, option.text);
          optionsDiv.appendChild(optionDiv);
        });
      } else if (question.type === 'fill-blank') {
        // Create hint: first letter + spaced underscores for remaining letters
        const answer = question.correctAnswer;
        const firstLetter = answer.charAt(0);
        const remainingLength = Math.max(0, answer.length - 1);
        const underscores = Array(remainingLength).fill('_').join(' ');
        const hint = remainingLength > 0 ? firstLetter + ' ' + underscores : firstLetter;
        
        // Replace ___ in sentence with the hint
        const sentenceWithHint = question.sentence.replace(/___/g, hint);
        
        contentDiv.innerHTML = \`
          <p style="margin-bottom: 16px;">\${escapeHtml(sentenceWithHint)}</p>
          <input type="text" class="input-answer" id="answer-\${index}" placeholder="Type your answer...">
        \`;
      } else if (question.type === 'matching') {
        contentDiv.innerHTML = \`
          <p style="margin-bottom: 16px;">Match English words with their Mandarin translations</p>
          <div class="matching-pairs">
            <div class="matching-column" id="english-\${index}"></div>
            <div class="matching-column" id="mandarin-\${index}"></div>
          </div>
        \`;

        const englishDiv = document.getElementById(\`english-\${index}\`);
        const mandarinDiv = document.getElementById(\`mandarin-\${index}\`);

        question.pairs.forEach((pair, pairIndex) => {
          const englishItem = document.createElement('div');
          englishItem.className = 'matching-item';
          englishItem.textContent = pair.english;
          englishItem.dataset.english = pair.english;
          englishItem.dataset.questionIndex = index;
          englishItem.onclick = () => selectMatchingItem(index, 'english', pair.english);
          englishDiv.appendChild(englishItem);
        });

        question.shuffledMandarin.forEach((mandarin, pairIndex) => {
          const mandarinItem = document.createElement('div');
          mandarinItem.className = 'matching-item';
          mandarinItem.textContent = mandarin;
          mandarinItem.dataset.mandarin = mandarin;
          mandarinItem.dataset.questionIndex = index;
          mandarinItem.onclick = () => selectMatchingItem(index, 'mandarin', mandarin);
          mandarinDiv.appendChild(mandarinItem);
        });

        // Initialize matching state
        if (!answers[index]) {
          answers[index] = { matches: [], selectedEnglish: null, selectedMandarin: null };
        }
      }
    }

    function selectOption(questionIndex, optionText) {
      answers[questionIndex] = optionText;
      const optionsDiv = document.getElementById(\`options-\${questionIndex}\`);
      Array.from(optionsDiv.children).forEach(child => {
        child.classList.remove('selected');
        if (child.textContent === optionText) {
          child.classList.add('selected');
        }
      });
    }

    function selectMatchingItem(questionIndex, side, value) {
      const question = questions[questionIndex];
      const state = answers[questionIndex];

      // Check if already matched
      const englishDiv = document.getElementById(\`english-\${questionIndex}\`);
      const mandarinDiv = document.getElementById(\`mandarin-\${questionIndex}\`);
      const allItems = [...englishDiv.children, ...mandarinDiv.children];
      
      const clickedItem = Array.from(allItems).find(item => 
        (side === 'english' && item.dataset.english === value) ||
        (side === 'mandarin' && item.dataset.mandarin === value)
      );

      if (clickedItem && clickedItem.classList.contains('matched')) {
        return; // Already matched, ignore click
      }

      if (side === 'english') {
        // Deselect previous English selection
        if (state.selectedEnglish) {
          const prevItem = Array.from(englishDiv.children).find(
            item => item.dataset.english === state.selectedEnglish
          );
          if (prevItem) prevItem.classList.remove('selected');
        }

        // Select new English item
        state.selectedEnglish = value;
        clickedItem.classList.add('selected');

        // Check if we have both selections
        if (state.selectedMandarin) {
          checkMatch(questionIndex);
        }
      } else {
        // Deselect previous Mandarin selection
        if (state.selectedMandarin) {
          const prevItem = Array.from(mandarinDiv.children).find(
            item => item.dataset.mandarin === state.selectedMandarin
          );
          if (prevItem) prevItem.classList.remove('selected');
        }

        // Select new Mandarin item
        state.selectedMandarin = value;
        clickedItem.classList.add('selected');

        // Check if we have both selections
        if (state.selectedEnglish) {
          checkMatch(questionIndex);
        }
      }
    }

    function checkMatch(questionIndex) {
      const question = questions[questionIndex];
      const state = answers[questionIndex];
      const englishDiv = document.getElementById(\`english-\${questionIndex}\`);
      const mandarinDiv = document.getElementById(\`mandarin-\${questionIndex}\`);

      // Find the correct pair
      const correctPair = question.pairs.find(
        pair => pair.english === state.selectedEnglish
      );

      const isCorrect = correctPair && correctPair.mandarin === state.selectedMandarin;

      // Get the selected items
      const englishItem = Array.from(englishDiv.children).find(
        item => item.dataset.english === state.selectedEnglish
      );
      const mandarinItem = Array.from(mandarinDiv.children).find(
        item => item.dataset.mandarin === state.selectedMandarin
      );

      if (isCorrect) {
        // Correct match - mark as matched
        if (englishItem && mandarinItem) {
          englishItem.classList.remove('selected');
          englishItem.classList.add('matched');
          mandarinItem.classList.remove('selected');
          mandarinItem.classList.add('matched');
        }

        // Store the match
        state.matches.push({
          english: state.selectedEnglish,
          mandarin: state.selectedMandarin
        });

        // Clear selections
        state.selectedEnglish = null;
        state.selectedMandarin = null;
      } else {
        // Incorrect match - show error animation and record mistake
        if (englishItem && mandarinItem) {
          englishItem.classList.add('incorrect');
          mandarinItem.classList.add('incorrect');

          // Record the mistake (fire and forget)
          if (correctPair) {
            recordMistake(state.selectedEnglish, correctPair.mandarin, 'matching');
          }

          // Remove error state after animation
          setTimeout(() => {
            englishItem.classList.remove('selected', 'incorrect');
            mandarinItem.classList.remove('selected', 'incorrect');
            state.selectedEnglish = null;
            state.selectedMandarin = null;
          }, 300);
        }
      }
    }

    function submitAnswers() {
      if (timerInterval) {
        clearInterval(timerInterval);
      }

      // Collect fill-blank answers
      questions.forEach((question, index) => {
        if (question.type === 'fill-blank') {
          const input = document.getElementById(\`answer-\${index}\`);
          if (input) {
            answers[index] = input.value;
          }
        }
      });

      // Calculate score and record mistakes
      let correct = 0;
      questions.forEach((question, index) => {
        if (question.type === 'multiple-choice') {
          const correctOption = question.options.find(opt => opt.isCorrect);
          if (answers[index] === correctOption.text) {
            correct++;
          } else {
            // Record mistake for multiple-choice
            // Extract word and translation from the question
            const sentenceParts = question.sentence.match(/["'](.+?)["']/);
            const word = sentenceParts ? sentenceParts[1] : question.sentence.split(' ')[0];
            const translation = correctOption.text;
            recordMistake(word, translation, 'multiple_choice');
          }
        } else if (question.type === 'fill-blank') {
          if (answers[index] && answers[index].toLowerCase() === question.correctAnswer.toLowerCase()) {
            correct++;
          } else {
            // Record mistake for fill-blank
            const word = question.correctAnswer;
            // Try to extract translation from sentence context
            const translation = question.sentence.includes('(') 
              ? question.sentence.match(/\\((.+?)\\)/)?.[1] || word
              : word;
            recordMistake(word, translation, 'fill_blank');
          }
        } else if (question.type === 'matching') {
          const state = answers[index];
          if (state && state.matches && state.matches.length === question.pairs.length) {
            correct++;
          } else {
            // Record mistakes for unmatched pairs in matching
            const matchedEnglish = new Set(state?.matches?.map(m => m.english) || []);
            question.pairs.forEach(pair => {
              if (!matchedEnglish.has(pair.english)) {
                recordMistake(pair.english, pair.mandarin, 'matching');
              }
            });
          }
        }
      });

      score = Math.round((correct / questions.length) * 100);

      // Show results
      document.getElementById('questions-container').style.display = 'none';
      const resultsDiv = document.getElementById('results-container');
      resultsDiv.style.display = 'block';
      resultsDiv.innerHTML = \`
        <div class="results">
          <div class="score">\${score}%</div>
          <p>You answered \${correct} out of \${questions.length} questions correctly</p>
          <button class="btn" onclick="location.reload()" style="margin-top: 24px;">Try Again</button>
        </div>
      \`;
    }

    function formatQuestionType(type) {
      const types = {
        'matching': 'Matching',
        'fill-blank': 'Fill in the Blank',
        'multiple-choice': 'Multiple Choice'
      };
      return types[type] || type;
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Initialize
    renderQuestions();
    startTimer();
    `
  }

  private getTotalQuestionCount(questions: SimplePracticeQuestions): number {
    return questions.matching.length + questions.fillBlank.length + questions.multipleChoice.length
  }

  private transformQuestionsToOriginalFormat(questions: SimplePracticeQuestions): any[] {
    const result: any[] = []

    // Add matching questions
    questions.matching.forEach((q) => {
      const pairs = q.pairs.map(p => ({ english: p.en, mandarin: p.zh }))
      const shuffledMandarin = [...pairs.map(p => p.mandarin)].sort(() => Math.random() - 0.5)
      
      result.push({
        id: this.generateId(),
        type: 'matching',
        pairs,
        shuffledMandarin
      })
    })

    // Add fill-blank questions
    questions.fillBlank.forEach((q) => {
      result.push({
        id: this.generateId(),
        type: 'fill-blank',
        sentence: q.sentence,
        correctAnswer: q.correctAnswer,
        hint: q.correctAnswer.charAt(0).toLowerCase()
      })
    })

    // Add multiple-choice questions
    questions.multipleChoice.forEach((q) => {
      const options = q.options.map((opt, idx) => ({
        text: opt,
        isCorrect: idx === q.correctAnswer
      }))
      
      result.push({
        id: this.generateId(),
        type: 'multiple-choice',
        sentence: q.question,
        options
      })
    })

    return result
  }

  private generateId(): string {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
      const r = Math.random() * 16 | 0
      const v = c === 'x' ? r : (r & 0x3 | 0x8)
      return v.toString(16)
    })
  }
}

export const practiceHtmlGenerator = new PracticeHtmlGenerator()